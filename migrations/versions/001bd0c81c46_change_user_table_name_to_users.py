"""Change user table name to users

Revision ID: 001bd0c81c46
Revises: 043576eaf03e
Create Date: 2025-05-08 16:10:45.172588

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision = '001bd0c81c46'
down_revision = '043576eaf03e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=200), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    
    # Copy data from old table to new table
    # Define a minimal ORM model for both tables
    old_table = table('user',
        column('id', sa.Integer),
        column('email', sa.String),
        column('password', sa.String),
        column('first_name', sa.String),
        column('last_name', sa.String)
    )
    
    new_table = table('users',
        column('id', sa.Integer),
        column('email', sa.String),
        column('password', sa.String),
        column('first_name', sa.String),
        column('last_name', sa.String)
    )
    
    # Execute SQL to copy data
    conn = op.get_bind()
    users = conn.execute(old_table.select()).fetchall()
    
    if users:
        # Insert data into new table
        for user in users:
            op.execute(
                new_table.insert().values(
                    id=user.id,
                    email=user.email,
                    password=user.password,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
            )
    
    # Now drop the old table
    op.drop_table('user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key')
    )
    
    # Copy data back from users to user
    old_table = table('users',
        column('id', sa.Integer),
        column('email', sa.String),
        column('password', sa.String),
        column('first_name', sa.String),
        column('last_name', sa.String)
    )
    
    new_table = table('user',
        column('id', sa.Integer),
        column('email', sa.String),
        column('password', sa.String),
        column('first_name', sa.String),
        column('last_name', sa.String)
    )
    
    # Execute SQL to copy data
    conn = op.get_bind()
    users = conn.execute(old_table.select()).fetchall()
    
    if users:
        # Insert data into new table
        for user in users:
            op.execute(
                new_table.insert().values(
                    id=user.id,
                    email=user.email,
                    password=user.password,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
            )
            
    op.drop_table('users')
    # ### end Alembic commands ###
